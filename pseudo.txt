schema.sql
department:

id - INT PRIMARY KEY
name - VARCHAR(30) to hold department name

CREATE TABLE department(
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    name VARCHAR(30) NOT NULL
);

role:

id - INT PRIMARY KEY
title - VARCHAR(30) to hold role title
salary - DECIMAL to hold role salary
department_id - INT to hold reference to department role belongs to

CREATE TABLE role(
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    title VARCHAR(30) NOT NULL,
    salary DECIMAL NOT NULL,
    department_id INT NOT NULL,
    FOREIGN KEY (department_id),
        REFERENCES department(id)
);

employee:

id - INT PRIMARY KEY
first_name - VARCHAR(30) to hold employee first name
last_name - VARCHAR(30) to hold employee last name
role_id - INT to hold reference to role employee has
manager_id - INT to hold reference to another employee that manages the employee being Created. This field may be null if the employee has no

CREATE TABLE employee(
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    role_id INT NOT NULL,
    manager_id INT,
    FOREIGN KEY (role_id)
        REFERENCES role(id)
);

seeds.sql 

USE employee_tracker;

INSERT INTO department (name)
VALUES ("Human Resources"), ("Maintenance"), ("Logistics"), ("Medicine"), ("Dissident Removal"), ("Sanitation")

INSERT INTO role (title, salary, department_id)
VALUES ("Vicar", 60000.0, "Human Resources"), ("Engineer", 75000.0, "Maintenance"), ("Stevedore", 45000.0, "Logistics"), ("Medic", 80000.0, "Medicine"), ("Merc", 55000.0, "Dissident Removal"), ("Sanitation Auto Mechanical", 0.0, "Sanitation")

INSERT INTO employee (first_name, last_name, manager_id)
VALUES ("Max", "Desoto"), ("Parvati", "Holcomb"), ("Felix", "Millstone"), ("Ellie", "Fenhill"), ("Nyoka", NULL), ("SAM", NULL), ("Alex", "Hawthorne", 1)

/db index.js
// Import required modules
const mysql = require("mysql");

// Connect to the employee tracker database
const connection = mysql.createConnection({
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: 'root',
    database: 'employee_trackerDB'
});

// Query the database and return fields and records from the
// employee table
const dbConnect = () => (
    connection.query('SELECT * FROM employee', (err, res) => {
        if (err) throw err
        // Return a table of employee data
        console.table(res);
}));
dbConnect();

index.js

Build a command-line application that at a minimum allows the user to:

Add departments, roles, employees

View departments, roles, employees

Update employee roles

Bonus points if you're able to:

Update employee managers

View employees by manager

Delete departments, roles, and employees

View the total utilized budget of a department -- ie the combined salaries of all employees in that department

// Import required modules and db
const inquirer = require("inquirer");
const db = require("./db");

// Initialize prompt to ask users whether they
// want to add departments, roles, and employees;
// view departments, roles, and employees;
// update employee roles
const init = async () => {
  const { employeeTrack } = await inquirer.prompt({
    name: "employeeTrack",
    type: "list",
    message: "Please select an action",
    choices: [
      "Add departments",
      "Add roles",
      "Add employees",
      "View employees by departments",
      "View employees by roles",
      "Update employee roles",
      "EXIT"
    ],
  });

  // Return functions to add, view, or update records to the database
  // depending on a user's choice
  switch (employeeTrack) {
    case "Add departments":
      addDept();
      break;
    case "Add roles":
      addRole();
      break;
    case "Add employees":
      addEmp();
      break;
    case "View employees by departments":
        viewDept();
        break;
    case "View employees by roles":
        viewRole();
        break;
    case "Update employee roles":
        updateEmp();
        break;
    default:
        process.exit(0);
  }
};
init();

const addDept = async () => {
    const { newDept } = await inquirer.prompt({
      name: "newDept",
      type: "input",
      message: "Please enter the name of the new department: ",
    });
    db.query(
      `INSERT INTO department (name) VALUES ('${newDept}')`,
      (err, res) => {
        if (err) throw err;
        console.table(res);
        console.log(`Added ${newDept} to department table!`);
      }
    );
    init();
  };

  const addRole = async () => {
    const { newRole, newRoleDept } = await inquirer.prompt([
      {
        name: "newRole",
        type: "input",
        message: "Please enter the title of the new role: ",
      },
      {
        name: "newRoleDept",
        type: "input",
        message: "Please input the new roles' department id: ",
      },
    ]);
  
    db.query(
      `INSERT INTO role (title, department_id) VALUES ('${newRole}', ${newRoleDept})`,
      (err, res) => {
        if (err) throw err;
        console.table(res);
        console.log(`Added ${newRole} to role table!`);
      }
    );
    init();
  };
  
  const addEmp = async () => {
    const { newEmpFirstName, newEmpLastName, newEmpRole } = await inquirer.prompt(
      [
        {
          name: "newEmpFirstName",
          type: "input",
          message: "Please enter the first name of the new employee: ",
        },
        {
          name: "newEmpLastName",
          type: "input",
          message: "Please enter the last name of the new employee: ",
        },
        {
          name: "newEmpRole",
          type: "input",
          message: "Please input the new employees' role id: ",
        },
      ]
    );
    db.query(
      `INSERT INTO employee (first_name, last_name, role_id) VALUES ('${newEmpFirstName}', '${newEmpLastName}', ${newEmpRole})`,
      (err, res) => {
        if (err) throw err;
        console.table(res);
        console.log(
          `Added ${newEmpFirstName} ${newEmpLastName} to employee table!`
        );
      }
    );
    init();
  };
  
  const viewDept = () => {
    db.query(
      "SELECT department.name, employee.first_name, employee.last_name FROM department RIGHT JOIN employee ON department.id = employee.role_id ORDER BY department.id", (err, res) => {
          if (err) throw err;
          console.table(res);
      });
      init();
  };
  
  const viewRole = () => {
      db.query(
        "SELECT role.title, employee.first_name, employee.last_name FROM role LEFT JOIN employee ON role.id = employee.id ORDER BY role.id", (err, res) => {
            if (err) throw err;
            console.table(res);
        });
        init();
    };
  
  const updateEmp = async () => {
      const { initRole, updateRole } = await inquirer.prompt([
          {
          name: 'initRole',
          type: 'input',
          message: 'Please enter the role you would like to update'
          },
        {
            name: "updateRole",
            type: "input",
            message: "Please enter the new role"
        }])
      db.query(`UPDATE role SET title = '${updateRole}' WHERE title = '${initRole}'`, (err, res) => {
          if (err) throw err;
          console.log(res);
      })
      init();
  }